{"version":3,"sources":["IngredientsList.js","SearchForm.js","App.js","serviceWorker.js","index.js"],"names":["IngredientsList","className","this","props","recipes","map","item","key","uuid","href","alt","title","target","src","thumbnail","ingredients","split","index","Component","SearchForm","state","showIngredients","searchPhrase","toggleList","setState","onSubmit","submit","rows","type","value","onChange","change","onClick","onMouseLeave","ingredient","App","err","handleInputChange","e","oldValue","newValue","innerHTML","handleSubmit","preventDefault","replace","API","fetch","then","response","ok","Error","json","data","results","catch","console","log","prevState","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3978faae.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './IngredientsList.css';\r\nimport uuid from 'react-uuid';\r\n\r\nclass IngredientsList extends Component {\r\n\r\nrender(){\r\n  return (\r\n  <div className=\"ingredients-list\">\r\n      {this.props.recipes.map(item => (\r\n        <div className=\"ingredients-item\" key={uuid()}>\r\n          <div className=\"ingredient-link\">\r\n            <a href={item.href} alt={item.title} target=\"blank\">{item.title}</a>\r\n          </div>\r\n          <div className=\"ingredient-properties\">\r\n              <div className=\"ingredient-img\"><img src={item.thumbnail} alt={item.title}></img></div>\r\n              <div className={'ingredient-tags'}>\r\n              {item.ingredients.split(',').map((item, index) => (<span key={index} >{item}</span>))}\r\n              </div>\r\n          </div>\r\n        </div>\r\n      ))}\r\n  </div>\r\n);\r\n}\r\n\r\n};\r\n\r\nexport default IngredientsList;\r\n\r\n","import React, { Component } from 'react';\r\nimport './SearchForm.css';\r\nimport IngredientsList from './IngredientsList';\r\n\r\n\r\n\r\nclass SearchForm extends Component {\r\n    state = {\r\n        showIngredients: false,\r\n        searchPhrase: ''\r\n    }\r\n\r\n    toggleList = () => {\r\n        this.setState({\r\n            showIngredients:  !this.state.showIngredients\r\n        })\r\n    }\r\n\r\n    ingredients = [\r\n        'Garlic',\r\n        'Chicken',\r\n        'Potatoes',\r\n        'Rice',\r\n        'Tomato',\r\n        'Broccoli',\r\n        'Cheddar',\r\n        'Cereal',\r\n        'Beef',\r\n        'Lobster',\r\n        'Salmon',\r\n        'Mushrooms',\r\n        'Onions',\r\n        'Apples',\r\n        'Oranges',\r\n        'Burritos'\r\n    ];\r\n\r\n    render() {\r\n        return <div>\r\n                <div className=\"header\">\r\n                   Aplikacja ułatwiająca wyszukiwanie przepisów kulinarnych \r\n                </div>\r\n                <div className=\"content\">\r\n                    <form onSubmit={this.props.submit}  className=\"search\" >\r\n                        <div className=\"search-label-container\">\r\n                            <label>Wyszukaj składniki:</label>\r\n                        </div>\r\n                        <div className={\"input-container\"}>  \r\n                            <textarea \r\n                                className=\"textarea\" rows=\"5\" \r\n                                type=\"text\"\r\n                                value={this.props.value}\r\n                                onChange={this.props.change}\r\n                                >\r\n                            </textarea>\r\n                            <div className=\"toggle-list-container\">\r\n                                <span className={\"toggle-list\"} onClick={this.toggleList}>{this.state.showIngredients ? <span>&#x25b2;</span> : <span>&#x25BC;</span> }</span>\r\n                            </div>\r\n                            <div className={this.state.showIngredients ? 'show' : 'hidden'} onMouseLeave={this.toggleList}>\r\n                                {this.ingredients.map((ingredient, index) => {\r\n                                return <div key={index} onClick={this.props.change}>{ingredient}</div>\r\n                                })}\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"search-button-container\">\r\n                            <button type={'submit'}>Wyszukaj</button>\r\n                        </div>\r\n                    </form>\r\n                    {this.props.submit ?  \r\n                        <IngredientsList recipes={this.props.recipes} showIngredients={this.state.showIngredients}\r\n                    /> : <h1 className=\"text-center\">...loading</h1> }\r\n                </div>\r\n                <div className=\"footer\">&copy;2020&nbsp; Dorota Kora</div>\r\n            </div>\r\n    }\r\n};\r\n\r\nexport default SearchForm","import React, { Component } from 'react';\nimport SearchForm from './SearchForm';\nimport './App.css';\n\nclass App extends Component {\n\n  state = {\n    value: '',\n    recipes: [],\n    err: false\n  };\n\n  handleInputChange = e => {\n    let oldValue = this.state.value;\n    let newValue = e.target.value ? `${e.target.value}` : oldValue + ` ${e.target.innerHTML}`;\n    this.setState({\n        value: newValue\n    })\n  }; \n\n\n\n    handleSubmit = e => {\n        e.preventDefault();\n        let value = this.state.value.replace(/ /g, \",\").replace(/^,|,$/g,'');\n    \n        const API = `https://cors-anywhere.herokuapp.com/http://www.recipepuppy.com/api/?i=${value}&p=10`\n        fetch(API)\n            .then(response => {\n                if (response.ok) {\n                    return response\n                }\n                throw Error(\"Wystąpił błąd\")\n            })\n            .then(response => response.json())\n            .then(data => {\n              \n                this.setState(state => {\n                  let recipes = data.results;\n                    return {\n                      recipes\n                    }\n                })  \n            })\n            .catch(err => {\n                console.log(err);\n                this.setState(prevState => ({\n                    err: true\n                }))\n            });\n    };\n\n     \n\n\n  render() {\n    return <div className=\"container\">\n            <SearchForm value={this.state.value}\n                        change={this.handleInputChange}\n                        submit={this.handleSubmit}\n                        recipes={this.state.recipes}/>\n          </div>\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}